// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String?   @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id") @default(autoincrement())
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String?   @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")
  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}


model User {
  id          Int        @default(autoincrement()) @id
  name        String?
  email       String?    @unique
  image       String?
  password    String?
  coverPhoto  String?
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @map(name: "updated_at")
  likes       LikedPost[]
  posts       Post[]
  comments    Comment[]
  profession  Profession[]
  profile     Profile?

  @@map(name: "users")
}


model Post {
  id        Int        @default(autoincrement()) @id
  title     String
  likes     LikedPost[]
  comments  Comment[]
  content   String
  published Boolean    @default(false)
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @default(now()) @map(name: "updated_at")
  authorId  Int
  author    User       @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model LikedPost {
  id      Int      @id @default(autoincrement())
  post    Post     @relation(fields: [postId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
  likedAt DateTime @default(now())
  postId  Int
  userId  Int

  @@map(name: "likedposts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  @@map(name: "comments")
}


model Profession{
  id          Int        @default(autoincrement()) @id
  role        String
  userId      Int
  user        User       @relation(fields: [userId], references: [id])

  @@map(name: "profession")
}


model Profile {
  id        Int        @default(autoincrement()) @id
  bio       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])

  @@map(name: "profiles")
}

